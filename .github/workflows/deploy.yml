name: Deploy Workflow

on:
  push:
    branches:
      - dev
    tags:
      - "v*.*.*"

permissions:
  contents: write
  pull-requests: read

jobs:
  validate-dev:
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run linting
        run: yarn lint

      - name: Build client application
        run: yarn build:client

      - name: Run tests (if any)
        run: |
          if [ -f "package.json" ] && jq -e '.scripts.test' package.json > /dev/null 2>&1; then
            yarn test
          else
            echo "No test script found in package.json, skipping tests..."
          fi

  merge-to-main:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Verify branches exist
        run: |
          git fetch origin
          echo "Available branches:"
          git branch -r

          if ! git show-ref --verify --quiet refs/remotes/origin/main; then
            echo "⚠️  Main branch doesn't exist, creating it from dev"
            git checkout -b main
            git push origin main
          fi

      - name: Merge dev into main
        run: |
          git checkout main
          git pull origin main

          # Check if there are differences to merge
          if git diff --quiet main origin/dev; then
            echo "No changes to merge from dev to main"
          else
            echo "Merging dev into main..."
            git merge origin/dev --no-ff -m "🚀 Release ${{ github.ref_name }}: merge dev into main"
            git push origin main
          fi

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found. Showing all commits."
            LOG=$(git log --pretty=format:"- [%h] %s" --no-merges)
          else
            echo "Previous tag: $PREV_TAG"
            LOG=$(git log $PREV_TAG..HEAD --pretty=format:"- [%h] %s" --no-merges) 
          fi

          # Handle multiline output properly
          {
            echo "log<<EOF"
            echo "$LOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            🚀 **Production Release ${{ github.ref_name }}**
            Mergé automatiquement de `dev` vers `main`.

            **Changements inclus :**
            ${{ steps.changelog.outputs.log }}

            **Statut :**
            - ✅ Build réussi
            - ✅ Tests passés
            - ✅ Mergé vers main
            - 🚀 Déploiement automatique via Vercel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
